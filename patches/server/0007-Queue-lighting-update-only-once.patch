From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Paul Sauve <paul@technove.co>
Date: Mon, 1 Feb 2021 20:29:12 -0500
Subject: [PATCH] Queue lighting update only once

Airplane
Copyright (C) 2020 Technove LLC

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index fdbf984e64f135abfdee465d76eb1112bccfa8c3..4a6914ba1de9692a140dd2a045621e1c9abe742a 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -1004,6 +1004,7 @@ public class ChunkProviderServer extends IChunkProvider {
             // Paper - moved up
             // Tuinity start - optimise chunk tick iteration
             com.tuinity.tuinity.util.maplist.IteratorSafeOrderedReferenceSet.Iterator<Chunk> iterator = this.entityTickingChunks.iterator();
+            boolean updateLighting = false; // Airplane
             try {
             while (iterator.hasNext()) {
                 Chunk chunk = iterator.next();
@@ -1028,7 +1029,7 @@ public class ChunkProviderServer extends IChunkProvider {
                             }
 
                             this.world.timings.chunkTicks.startTiming(); // Spigot // Paper
-                            this.world.a(chunk, k);
+                            if (this.world.abool(chunk, k)) updateLighting = true; // Airplane
                             this.world.timings.chunkTicks.stopTiming(); // Spigot // Paper
                             MinecraftServer.getServer().executeMidTickTasks(); // Tuinity - exec chunk tasks during world tick
                         }
@@ -1037,6 +1038,7 @@ public class ChunkProviderServer extends IChunkProvider {
             } // Tuinity start - optimise chunk tick iteration
             } finally {
                 iterator.finishedIterating();
+                if (updateLighting) this.getLightEngine().queueUpdate();
             }
             // Tuinity end - optimise chunk tick iteration
             this.world.getMethodProfiler().enter("customSpawners");
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index a873d60875b2c08c8813cb365566e46ee99cb625..8f5c1d47cefddab018c59eee179b527fac1a4c06 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -1027,7 +1027,10 @@ public class WorldServer extends World implements GeneratorAccessSeed {
     private final com.destroystokyo.paper.util.math.ThreadUnsafeRandom randomTickRandom = new com.destroystokyo.paper.util.math.ThreadUnsafeRandom();
     // Paper end
 
-    public void a(Chunk chunk, int i) { final int randomTickSpeed = i; // Paper
+    // Airplane start - create version of chunk tick that returns a bool for updating lighting
+    public void a(Chunk chunk, int i) { this.abool(chunk, i); }
+    public boolean abool(Chunk chunk,int i) { final int randomTickSpeed = i; // Paper
+        // Airplane end
         ChunkCoordIntPair chunkcoordintpair = chunk.getPos();
         boolean flag = this.isRaining();
         int j = chunkcoordintpair.d();
@@ -1136,9 +1139,13 @@ public class WorldServer extends World implements GeneratorAccessSeed {
             }
             gameprofilerfiller.exit();
             timings.chunkTicksBlocks.stopTiming(); // Paper
-            getChunkProvider().getLightEngine().queueUpdate(); // Paper
+            // Airplane start
+            // getChunkProvider().getLightEngine().queueUpdate(); // Paper
+            return true;
+            // Airplane end
             // Paper end
         }
+        return false;
     }
 
     protected BlockPosition a(BlockPosition blockposition) {
